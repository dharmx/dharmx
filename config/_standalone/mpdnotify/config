#!/bin/bash
#
# mpdnotify config - any valid bash is allowed, you
# only need to define handle_event() for the daemon
# to run properly
#
# $mydir exists, and it's value is /home/maker/.config/mpdnotify
#
###

###
#
# the actual handle_event() definition
#
# this is the only requirement for a valid config
#
###

# Constants
if [ "$MPD_HOST" ]; then HOST="$MPD_HOST"; else HOST="localhost"; fi
if [ "$MPD_PORT" ]; then PORT="$MPD_PORT"; else PORT="6600"; fi
MPD_TCP="/dev/tcp/$HOST/$PORT"
coverDir="$XDG_CACHE_HOME/mpd"
tmpCover="/tmp/cover"
baseCover="$XDG_CONFIG_HOME/mpdnotify/extras/base.png"
topCover="$XDG_CONFIG_HOME/mpdnotify/extras/top.png"
noCover="$XDG_CONFIG_HOME/mpdnotify/extras/NOCOVER.jpg"
myPID="$XDG_CONFIG_HOME/mpdnotify/pid"
mpdPID=$(pidof mpd)
mpdArtist="Could not find Artist's name"
mpdTitle="Could not find Song's title"
mpdAlbum="Could not find Album's name"
mpcLength="Could not find Song's length"
mpcInfo="Cound not find Song's info"
showCover="true"
expireTime="1300"
#logout="true"

function mpd_sndcommmand() {
	# $1 command
	exec 5<>"$MPD_TCP" 2>/dev/null
	[[ $? -gt 0 ]] && return 1
	echo "$1" >&5
	echo "close" >&5
	tmp=$(cat <&5)
	exec 5>&-
	_ret=$(head -n -1 <<<"$tmp" | tail -n +2)
	return 0
}

function mpd_getinfo() {
	mpd_sndcommmand currentsong
	[[ $? -gt 0 ]] && return 1
	_tmp=$_ret
	mpdTitle=$(grep "^Title: " <<<"$_tmp" 2>/dev/null | sed "s/Title: //")
	mpdArtist=$(grep "^Artist: " <<<"$_tmp" 2>/dev/null | sed "s/Artist: //")
	mpdAlbum=$(grep "^Album: " <<<"$_tmp" 2>/dev/null | sed "s/Album: //")
	_songtime=$(grep "^Time: " <<<"$_tmp" 2>/dev/null | sed "s/Time: //" | cut -f 1 -d :)
	((_mm = $_songtime / 60))
	[[ ${#_mm} -eq 1 ]] && _mm="0$_mm"
	((_ss = $_songtime - $_mm * 60))
	[[ ${#_ss} -eq 1 ]] && _ss="0$_ss"
	mpdLength="$_mm:$_ss"
	mpd_sndcommmand "status"
	_tmp=$_ret
	mpdSongID=$(grep "^songid: " <<<"$_tmp" 2>/dev/null | sed "s/songid: //")
	mpdPlaylistL=$(grep "^playlistlength: " <<<"$_tmp" 2>/dev/null | sed "s/playlistlength: //")
}

function fetch_cover() {
	album=$1
	file="$coverDir/$album"
	if [ ! -f "$file" ]; then
		logger "$file is not in covers... " >/dev/null
		url="http://www.albumart.org/index.php?srchkey=${album// /+}&itempage=1&newsearch=1&searchindex=Music"
		cover_url=$(curl -s "$url" | awk -F 'src=' '/zoom-icon.jpg/ {print $2}' | cut -d '"' -f 2 | head -n1)
		if [ "$cover_url" != "" ]; then
			logger "$file retrieved and placed in covers directory..." >/dev/null
			wget -q -O "$file" "$cover_url"
		else
			logger "ERROR: Album cover not found online. Searched for: ${album// /+}" >/dev/null
		fi
	fi
}

handle_event() {
	if [[ -z $mpdPID ]]; then
		echo "MPD is not currently running!"
		if [[ -f "$myPID" ]]; then
			rm "$myPID"
		fi
		exit
	else
		mpd_getinfo
		if [ "$showCover" = "true" ]; then
			if [ -f "/tmp/cover" ]; then rm /tmp/cover; fi
			if [ -f "$coverDir/$mpdAlbum" ]; then
				cp "$coverDir/$mpdAlbum" /tmp/cover
			else
				fetch_cover "$mpdAlbum"
				if [ -f "$coverDir/$mpdAlbum" ]; then
					cp "$coverDir/$mpdAlbum" /tmp/cover
				else
					cp "$noCover" /tmp/cover
				fi
			fi

			mogrify -resize 65x65! "$tmpCover"
			convert "$baseCover" "$tmpCover" -geometry +4+3 -composite "$topCover" -geometry +0+0 -composite "$tmpCover"
			mpdAlbum=$(echo "$mpdAlbum" | sed -e 's/&/&amp;/')
			mpdTitle=$(echo "$mpdTitle" | sed -e 's/&/&amp;/')
			mpdArtist=$(echo "$mpdArtist" | sed -e 's/&/&amp;/')
			[[ "${#mpdArtist}" -gt "25" ]] && mpdArtist=$(echo "${mpdArtist:0:25}...")
			[[ "${#mpdTitle}" -gt "25" ]] && mpdTitle=$(echo "${mpdTitle:0:25}...")
			[[ "${#mpdAlbum}" -gt "25" ]] && mpdAlbum=$(echo "${mpdAlbum:0:25}...")
			notify-send -a "mpd" --expire-time="$expireTime" -i "$tmpCover" "$mpdTitle" "By $mpdArtist"
            # "$(
				# echo "From: <i>$mpdAlbum</i>"
				# echo "Length: <i>$mpdLength</i>"
				# echo "Position: <i>$mpdSongID / $mpdPlaylistL</i>"
			# )"

		else
			notify-send --expire-time="$expireTime" "MPD Notification" "$(
				echo "<u>$mpdTitle</u>"
				echo "By: <i>$mpdArtist</i>"
				echo "From: <i>$mpdAlbum</i>"
				echo "Length: <i>$mpdLength</i>"
				echo "Position: <i>$mpdSongID / $mpdPlaylistL</i>"
			)"
		fi

		if [ "$logout" == "true" ]; then
			echo -e "$mpdTitle \n $mpdArtist \n $mpdAlbum \n" >"$HOME"/mpdout
		fi
	fi
}

handle_event
